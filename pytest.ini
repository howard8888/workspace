# pytest.ini
[pytest]
testpaths = tests

# Keep live printouts; let preflight supply -v and coverage reporters.
# IMPORTANT -- as start using more cca8 modules more extensively add them to list below
#   so that coverage will be honestly reported for the modules the project is using
# adopts settings defines default command-line options that pytest will use every time
#   -s   disables captureing of standard output and therefore can display and/or log outputs
#   --maxfail=1   stops running after maxfail number of times (e.g., if =1 then after first failed test)
# with regard to modules added below, we don't add cca8_run.py since cca8_run.py preflight already 
#   passes coverage flags for the runner

addopts =
    -s
    --maxfail=5
    --cov=cca8_features
    --cov=cca8_column
    --cov=cca8_temporal
    --cov=cca8_world_graph
    --cov=cca8_controller

# Keep the tree tidy
norecursedirs = .git .pytest_cache build dist docs .coverage

# Optional markers you can use later
#  tests can be tagged (i.e., labeled) with these markers and then
#   this allows various groups of tests to be selected for pytest during a run
#   e.g., in a unit test can tag a test function as follows:
#     @pytest.mark.net
#     def some_unit_test():
#   then in this example if run pytest as: ">pytest -m net"  then only the
#      net decorated will run
#   e.g., >pytest -m "not slow"   <-- runs test that are not slow tagged
markers =
    slow: long-running or integration tests
    viz: tests that touch visualization (e.g., pyvis)
    net: tests that would use the network

#tells pytest to ignore, i.e., suppress, these warnings
# deprecation warnings often are given by various libraries or Python itself
#   about this or that feature that will be deprecated eventually
# the Python built-in UserWarning class is used by libraries about non-critical
#   errors but should be brought to the user's attention -- comment this to see them
filterwarnings =
    ignore::DeprecationWarning
    ignore::UserWarning
